# PyWebTransport CI/CD Pipeline

stages:
  - lint
  - test
  - report
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_COLOR: "1"

cache:
  paths:
    - .cache/pip

lint:
  stage: lint
  image: python:3.11-slim
  before_script:
    - python -m pip install --upgrade pip
    - pip install -r dev-requirements.txt
  script:
    - black --check src tests
    - flake8 src tests
    - mypy src tests
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH == "main"

test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.11", "3.12", "3.13"]
  image: python:$PYTHON_VERSION-slim
  before_script:
    - python -m pip install --upgrade pip
    - pip install -r dev-requirements.txt
    - pip install -e .
  script:
    - pytest --cov=pywebtransport --cov-report=term --cov-report=xml:coverage.${PYTHON_VERSION}.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    paths:
      - coverage.*.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.*.xml
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH == "main"

codecov:
  stage: report
  image: python:3.11-slim
  dependencies:
    - test
  before_script:
    - apt-get update && apt-get install -y wget
  script:
    - wget https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
    - ./codecov -t $CODECOV_TOKEN -s "lemonsterfy/pywebtransport"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

build:
  stage: build
  image: python:3.11-slim
  before_script:
    - python -m pip install --upgrade pip
    - pip install hatch
  script:
    - hatch build
    - echo "Built packages:"
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy:
  stage: deploy
  image: python:3.11-slim
  variables:
    GIT_DEPTH: 0
  dependencies:
    - build
  before_script:
    - apt-get update && apt-get install -y ca-certificates git
    - cp $INTERNAL_CA_CERT /usr/local/share/ca-certificates/internal_ca.crt
    - update-ca-certificates
    - python -m pip install --upgrade pip
    - pip install hatch
    - pip install .
  script:
    - export VERSION=$(hatch version)
    - |
      if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
        echo "Version v$VERSION already released - skipping"
        exit 0
      fi
    - hatch publish
    - git remote set-url origin "https://gitlab-ci-token:$GITLAB_DEPLOY_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git config user.name "GitLab CI"
    - git config user.email "ci@gitlab.local"
    - git tag "v$VERSION"
    - git push origin "v$VERSION"
    - git remote add github https://$GITHUB_TOKEN@github.com/lemonsterfy/pywebtransport.git
    - git checkout $CI_COMMIT_BRANCH
    - git push github $CI_COMMIT_BRANCH --tags || echo "GitHub sync failed (release still successful)"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  environment:
    name: production
    url: https://pypi.org/project/pywebtransport/
